#!/usr/bin/env node
const { LuaFactory, LuaReturn, LuaType, LUA_MULTRET, decorate } = require('../dist')
const fs = require('fs')
const path = require('path')
const readline = require('readline')

async function* walk(dir) {
    const dirents = await fs.promises.readdir(dir, { withFileTypes: true })
    for (const dirent of dirents) {
        const res = path.resolve(dir, dirent.name)
        if (dirent.isDirectory()) {
            yield* walk(res)
        } else {
            yield res
        }
    }
}

async function main() {
    const factory = new LuaFactory()
    const luamodule = await factory.getLuaModule()
    const lua = await factory.createEngine()

    let snippets = process.argv.splice(2)

    const consumeOption = (option, single) => {
        let i = -1
        const values = []
        while ((i = snippets.indexOf(option)) >= 0) {
            values.push(snippets.splice(i, single ? 1 : 2).reverse()[0])
        }
        return values
    }

    const includes = consumeOption('-l')
    const forceInteractive = consumeOption('-i', true).length > 0
    let runFile = process.stdin.isTTY && consumeOption(snippets[0], true)[0]
    const args = snippets

    for (const include of includes) {
        const stat = await fs.promises.lstat(include)
        if (stat.isFile()) {
            await factory.mountFile(include, await fs.promises.readFile(include))
        } else {
            for await (const file of walk(include)) {
                await factory.mountFile(file, await fs.promises.readFile(file))
            }
        }
    }

    lua.global.set('arg', decorate(args, { disableProxy: true }))

    let interactive = process.stdin.isTTY && (forceInteractive || !runFile)

    if (runFile) {
        runFile = path.resolve(process.cwd(), runFile)
        await factory.mountFile(runFile, await fs.promises.readFile(runFile))

        const result = await lua.doFile(runFile)
        if (result) {
            console.log(result)
        }
    }

    if (!interactive && runFile) {
        return
    }

    if (interactive) {
        // Call directly from module to bypass the result verification
        const loadcode = (code) => !lua.global.setTop(0) && luamodule.luaL_loadstring(lua.global.address, code) === LuaReturn.Ok

        const version = require('../package.json').version
        console.log('Welcome to Wasmoon v' + version)

        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
            terminal: true,
            removeHistoryDuplicates: true
        })

        rl.prompt()

        for await (const line of rl) {
            const loaded = loadcode(line) || loadcode(`return ${line}`)
            if (!loaded) {
                console.log(lua.global.getValue(-1, LuaType.String))
                rl.prompt()
                continue
            }

            const result = luamodule.lua_pcallk(lua.global.address, 0, LUA_MULTRET, 0, 0, null)
            if (result === LuaReturn.Ok) {
                const returnValues = Array.from({ length: lua.global.getTop() })
                    .map((_, i) => luamodule.luaL_tolstring(lua.global.address, i + 1, null))

                if (returnValues.length) {
                    console.log(...returnValues)
                }
            } else {
                console.log(lua.global.getValue(-1, LuaType.String))
            }

            rl.prompt()
        }
    } else {
        const result = await lua.doString(fs.readFileSync(0, 'utf-8'))
        if (result) {
            console.log(result)
        }
    }
}

main().catch(err => {
    console.error(err)
    process.exit(1)
})